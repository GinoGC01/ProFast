---
import professionals from "../../professionals/professionals.json";
import CardHome from "./cardHome.astro";
---

<section>
  <strong>ProFast</strong>
  <div class="professionals-title-dinamyc">
    <span id="all-professionals">Todas los profesionales</span>
  </div>
  <div class="filters">
    <select id="category-filter">
      <option value="all">Todos</option>
      {
        // Crear un conjunto para almacenar combinaciones Ãºnicas de categorÃ­a y profesiÃ³n
        Array.from(
          new Set(
            professionals.map(
              ({ category, profession }) => `${category}|${profession}`
            )
          )
        ).map((uniqueCombo) => {
          const [category, profession] = uniqueCombo.split("|"); // Separar la categorÃ­a y profesiÃ³n
          return <option value={category}>{profession}</option>;
        })
      }
    </select>
    <form id="search-filter">
      <input type="text" name="filter" placeholder="Buscar por profesiÃ³n..." />
      <button>Buscar</button>
    </form>
    <span id="total-filters"></span>
  </div>
  <div class="cards-container">
    <span style="display: none;" id="no-result"
      >No hay resultados para tu busqueda. Revisa los filtros, ten en cuenta las
      tildes ðŸ«¡</span
    >
    <ul class="list-of-cards" id="cards-container">
      {
        professionals?.map(
          ({
            name,
            id,
            achivements,
            backgroundImg,
            verify,
            testimonies,
            profileImg,
            profession,
            informationOfService,
            category,
            pruralProfession,
          }) => {
            return (
              <CardHome
                id={id}
                category={category}
                achievements={achivements}
                backgroundImg={backgroundImg}
                name={name}
                verify={verify}
                testimonies={testimonies}
                profileImg={profileImg}
                profession={profession}
                informationOfWork={informationOfService}
                pruralProfession={pruralProfession}
              />
            );
          }
        )
      }
    </ul>
  </div>
</section>

<style>
  section {
    display: grid;
    grid-template-columns: 20em 1fr;
    grid-template-rows: 4em 1fr 2em;
    width: 100%;
    height: 100vh;
    gap: 1em;
    color: white;
  }

  .filters {
    grid-column: 1 / 2;
    grid-row: 2 / 3;
  }

  .cards-container {
    grid-column: 2 / 3;
    grid-row: 2/3;
    padding-block: 10px;
  }

  .list-of-cards {
    width: 100%;
    display: grid;
    gap: 1em;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    padding: 0.5em 1em;
    max-height: 90vh;
    overflow-y: scroll;
  }

  /* width */
  .list-of-cards::-webkit-scrollbar {
    width: 10px;
  }

  /* Track */
  .list-of-cards::-webkit-scrollbar-track {
    background: #f1f1f100;
  }

  /* Handle */
  .list-of-cards::-webkit-scrollbar-thumb {
    background: #888;
  }

  /* Handle on hover */
  .list-of-cards::-webkit-scrollbar-thumb:hover {
    background: #555;
  }

  .professionals-title-dinamyc {
    grid-column: 2/3;
    grid-row: 1/2;
  }
</style>

<script is:inline>
  const filterSelect = document.getElementById("category-filter");
  const cardsContainer = document.getElementById("cards-container");

  const formSearchFilter = document.getElementById("search-filter");

  const spanAllProfessionals = document.getElementById("all-professionals");
  const spanNoResult = document.getElementById("no-result");
  const spanTotalFilters = document.getElementById("total-filters");

  filterSelect?.addEventListener("change", () => {
    const selectedCategory = filterSelect.value;
    const cards = cardsContainer.querySelectorAll(".card");

    cards.forEach((card) => {
      const category = card.getAttribute("data-category");
      card.style.display =
        selectedCategory === "all" || category === selectedCategory
          ? ""
          : "none";

      if (category === selectedCategory) {
        const pruralProfession = card.getAttribute("data-pruralProfession");
        spanAllProfessionals.innerText = pruralProfession;
        spanNoResult.style.display = "none";
      } else if (selectedCategory === "all") {
        spanAllProfessionals.innerText = "Todos los profesionales";
        spanNoResult.style.display = "none";
      }
    });
  });

  formSearchFilter.addEventListener("submit", (e) => {
    e.preventDefault();

    // Verifica que e.target sea un formulario
    const form = e.target instanceof HTMLFormElement ? e.target : null;
    let contadorCards = 0;
    let title = "";

    if (form) {
      const formData = new FormData(form);
      const fields = Object.fromEntries(formData);
      const filter = fields.filter;

      const cards = cardsContainer.querySelectorAll(".card");

      cards.forEach((card) => {
        const profession = card.getAttribute("data-profession");
        const pruralProfession = card.getAttribute("data-pruralProfession");

        const professionData = profession
          .toLowerCase()
          .includes(filter.toLowerCase().trim());
        if (typeof filter === "string" && profession && filter != "") {
          card.style.display = filter === "all" || professionData ? "" : "none";
          if (card.style.display != "none") {
            contadorCards += 1;
            title = pruralProfession;
            spanAllProfessionals.innerText = title;
          }
        }
      });
      if (contadorCards == 0 && filter != "") {
        spanNoResult.style.display = "block";
        spanAllProfessionals.innerText = "";
      } else {
        spanNoResult.style.display = "none";
      }

      // TO DO contador cards
      if (contadorCards != 0) {
        spanTotalFilters.innerText = `Resultados de la busqueda: (${contadorCards})`;
      }
    }
  });
</script>
